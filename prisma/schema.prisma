generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model User {
  id            String     @id @default(uuid())
  name          String
  dob           DateTime?
  gender        Gender?
  mobile_number String?    @unique
  image         String?
  email         String     @unique
  password      String
  isSeller      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  userRoles     UserRole[]
  Store         Store?
  orders        Order[]
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  userRoles   UserRole[]
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  role      Role      @relation(fields: [roleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

enum RoleName {
  buyer
  seller
  admin
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  stock       Int     @default(0)
  isPublished Boolean @default(false)

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deletedAt  DateTime?
  storeId    String?
  store      Store?            @relation(fields: [storeId], references: [id])
  categories ProductCategory[]
  images     ProductImage[]
  OrderItem  OrderItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relasi ke Product
  products ProductCategory[]
}

model ProductImage {
  id        String    @id @default(uuid())
  url       String
  isPrimary Boolean   @default(false) // optional, untuk menandai gambar utama
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product   @relation(fields: [productId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime?

  @@id([productId, categoryId])
}

model Store {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  userId      String    @unique
  description String?
  address     String?
  isActive    Boolean   @default(false)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  products Product[]
  orders   Order[]

  // Relasi
  user User @relation(fields: [userId], references: [id])
}

// schema.prisma

model Order {
  id            String      @id @default(uuid())
  totalPrice    Float
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  userId  String
  storeId String

  user       User        @relation(fields: [userId], references: [id])
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// schema.prisma

model OrderItem {
  id        String    @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// create cart mode
// create cart_product model
